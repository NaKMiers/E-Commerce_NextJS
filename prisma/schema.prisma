datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  role           Role      @default(user)
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  orders         Order[]
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String
  paymentIntentId String            @unique
  products        CartProductType[]
  address         Address?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type CartProductType {
  id           String
  name         String
  price        Float
  quantity     Int
  brand        String
  description  String
  selectedType SelectedType
}

type SelectedType {
  color     String
  colorCode String
  image     String
}

type Address {
  country    String
  city       String
  state      String
  postalCode String
  line1      String
  line2      String
}

enum Role {
  user
  admin
}
